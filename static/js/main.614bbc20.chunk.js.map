{"version":3,"sources":["utils/userLoginContext.ts","components/searchPage/components/searchBar/SearchBar.tsx","requests/headers.ts","requests/get/userId/userId.ts","components/searchPage/SearchPage.tsx","requests/get/userFollows/userFollows.ts","components/profilePage/components/followedList/followedListEntry/FollowedListEntry.tsx","requests/get/userPictures/userPictures.ts","components/profilePage/components/followedList/FollowedList.tsx","components/profilePage/ProfilePage.tsx","components/App.tsx","index.tsx"],"names":["userLoginContext","createContext","SearchBar","useContext","setUserLogin","onChange","e","target","value","type","className","placeholder","headers","Headers","process","Authorization","userId","userLogin","a","fetch","request","json","res","console","log","SearchPage","USER_LOGIN","useParams","useState","toProfilePage","setToProfilePage","searchMessage","setSearchMessage","getUserId","data","id","useEffect","onSubmit","event","preventDefault","to","icon","userFollows","FollowedListEntry","from_id","from_login","from_name","to_id","to_name","followed_at","userPictures","FollowedList","follows","followsLogins","map","follow","to_login","join","slice","getUsersPictures","ProfilePage","userObject","setUserObject","toSearchPage","setToSearchPage","getUserData","userData","fetchUserObject","App","Provider","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.614bbc20.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\ntype overviewContextProps = [\n  userLogin: string,\n  setOverviewBox: React.Dispatch<React.SetStateAction<any>>\n];\n\nexport const userLoginContext = createContext<overviewContextProps>([\"\", () => { }]);","import { useContext } from 'react';\nimport { userLoginContext } from '../../../../utils/userLoginContext';\n\nexport const SearchBar = () => {\n  const [, setUserLogin] = useContext(userLoginContext);\n\n  return (\n    <input\n      onChange={(e) => setUserLogin(e.target.value)}\n      type='text'\n      className='SearchBar'\n      placeholder='Search'\n    ></input>\n  );\n};\n","const clientId = process.env.REACT_APP_CLIENT_ID;\nconst oauthCode = process.env.REACT_APP_OAUTH_CODE;\nexport const headers = new Headers({\n  'Client-ID': clientId!,\n  Authorization: `Bearer ${oauthCode}`,\n});","//https://dev.twitch.tv/docs/api/reference#get-users\nimport { userIdType } from './userId.type';\nimport { headers } from '../../headers';\n\nlet url = 'https://api.twitch.tv/helix/users?login=';\nexport const userId = async (\n  userLogin: string\n): Promise<userIdType | undefined> => {\n  try {\n    const request = await fetch(url + userLogin, { headers: headers });\n    const res = await request.json();\n    console.log(res);\n    return res;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import { useState, useEffect, useContext } from 'react';\nimport { SearchBar } from './components/searchBar/SearchBar';\nimport { Icon } from '@iconify/react';\nimport { userLoginContext } from '../../utils/userLoginContext';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { userId } from '../../requests/get/userId/userId';\n\ninterface ParamTypes {\n  USER_LOGIN?: string;\n}\nexport const SearchPage = () => {\n  const { USER_LOGIN } = useParams<ParamTypes>();\n  const [userLogin] = useContext(userLoginContext);\n  const [toProfilePage, setToProfilePage] = useState(false);\n  const [searchMessage, setSearchMessage] = useState('');\n  const getUserId = async (userLogin: string) => {\n    const res = await userId(userLogin);\n    return res?.data[0]?.id;\n  };\n\n  useEffect(() => {\n    // if USER_LOGIN exist, then we are on /error/nick website and there was error finding the user\n    if (USER_LOGIN) {\n      setSearchMessage(`${USER_LOGIN} was not found`);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setSearchMessage(`searching for ${userLogin}`);\n    const userId = await getUserId(userLogin);\n    //if userId was not found the message that user was not found pops out, if found redirect to profile page\n    if (!userId) {\n      setSearchMessage(`${userLogin} was not found`);\n    } else {\n      setToProfilePage(true);\n    }\n  };\n  if (toProfilePage) {\n    return <Redirect to={`${process.env.PUBLIC_URL}/${userLogin}`} />;\n  }\n  return (\n    <div className='SearchPage'>\n      <form onSubmit={onSubmit} className='searchField'>\n        <Icon icon='logos:twitch' className='searchField__icon' />\n        <div className='searchField__text'>\n          <p>Search for a twitch user</p>\n        </div>\n        <SearchBar />\n        {searchMessage}\n      </form>\n    </div>\n  );\n};\n","//https://dev.twitch.tv/docs/api/reference/#get-users-follows\nimport { userFollowsType } from './userFollows.type';\nimport { headers } from '../../headers';\n\nlet url = 'https://api.twitch.tv/helix/users/follows?first=100&from_id=';\nexport const userFollows = async (\n  userId: string\n): Promise<userFollowsType | undefined> => {\n  console.log(process.env.REACT_APP_OAUTH_CODE);\n  try {\n    const request = await fetch(url + userId, { headers: headers });\n    return await request.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n","interface Props {\n  from_id: string;\n  from_login: string;\n  from_name: string;\n  to_id: string;\n  to_login: string;\n  to_name: string;\n  followed_at: Date;\n}\n\nexport const FollowedListEntry: React.FC<Props> = ({\n  from_id,\n  from_login,\n  from_name,\n  to_id,\n  to_name,\n  followed_at,\n}) => {\n  return (\n    <div>\n      <p>{from_id}</p>\n      <p>{from_login}</p>\n      <p>{from_name}</p>\n      <p>{to_id}</p>\n      <p>{to_name}</p>\n      <p>{followed_at}</p>\n    </div>\n  );\n};\n","//https://dev.twitch.tv/docs/api/reference#get-users\nimport { userPicturesType } from './userPictures.type';\nimport { headers } from '../../headers';\n\nlet url = 'https://api.twitch.tv/helix/users?';\nexport const userPictures = async (\n  userLogin: string\n): Promise<userPicturesType | undefined> => {\n  try {\n    const request = await fetch(url + userLogin, { headers: headers });\n    const res = await request.json();\n    return res;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import { useEffect } from 'react';\nimport { follow } from '../../../../requests/get/userFollows/userFollows.type';\nimport { FollowedListEntry } from './followedListEntry/FollowedListEntry';\nimport { userPictures } from '../../../../requests/get/userPictures/userPictures';\n\ninterface Props {\n  follows: follow[];\n}\n\nexport const FollowedList: React.FC<Props> = ({ follows }) => {\n  const followsLogins = follows\n    .map((follow) => `&login=${follow.to_login}`)\n    .join('')\n    .slice(1);\n  console.log(followsLogins);\n\n  const getUsersPictures = async (followsLogins: string) => {\n    const res = await userPictures(followsLogins);\n    console.log(res);\n    return;\n  };\n  useEffect(() => {\n    getUsersPictures(followsLogins);\n  }, [followsLogins]);\n  return (\n    <div>\n      {follows.map((follow: follow) => (\n        <FollowedListEntry {...follow} />\n      ))}\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { userFollows } from '../../requests/get/userFollows/userFollows';\nimport { userFollowsType } from '../../requests/get/userFollows/userFollows.type';\nimport { userId } from '../../requests/get/userId/userId';\nimport { FollowedList } from './components/followedList/FollowedList';\nimport { Redirect } from 'react-router-dom';\n\ninterface ParamTypes {\n  USER_LOGIN: string;\n}\nexport const ProfilePage = () => {\n  const { USER_LOGIN } = useParams<ParamTypes>();\n  const [userObject, setUserObject] = useState<userFollowsType>();\n  const [toSearchPage, setToSearchPage] = useState(false);\n  const getUserId = async (userLogin: string) => {\n    const res = await userId(userLogin);\n    return res?.data[0]?.id;\n  };\n  const getUserData = async (userId: string) => {\n    const userData = await userFollows(userId);\n    return userData;\n  };\n  useEffect(() => {\n    const fetchUserObject = async () => {\n      const userId = await getUserId(USER_LOGIN);\n      //if userId was not found that means user used link /twitch-followers/nick in browser instead of form\n      //and the twitch user doesn't exist so we redirect him to search page\n      if (!userId) {\n        setToSearchPage(true);\n      } else {\n        setUserObject(await getUserData(userId));\n      }\n    };\n    fetchUserObject();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (toSearchPage) {\n    return <Redirect to={`${process.env.PUBLIC_URL}/error/${USER_LOGIN}`} />;\n  }\n  return (\n    <div className='profilePage'>\n      {userObject && userObject.data && (\n        <FollowedList follows={userObject.data} />\n      )}\n    </div>\n  );\n};\n","import { SearchPage } from './searchPage/SearchPage';\nimport { ProfilePage } from './profilePage/ProfilePage';\nimport { userLoginContext } from '../utils/userLoginContext';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nexport const App = () => {\n  const [userLogin, setUserLogin] = useState('');\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <userLoginContext.Provider value={[userLogin, setUserLogin]}>\n            <Route\n              path={[\n                `${process.env.PUBLIC_URL}/`,\n                `${process.env.PUBLIC_URL}/error/:USER_LOGIN`,\n              ]}\n              exact\n            >\n              <SearchPage />\n            </Route>\n            <Route path={`${process.env.PUBLIC_URL}/:USER_LOGIN`} exact>\n              <ProfilePage />\n            </Route>\n          </userLoginContext.Provider>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}