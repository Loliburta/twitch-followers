{"version":3,"sources":["utils/userLoginContext.ts","components/searchPage/components/searchBar/SearchBar.tsx","requests/headers.ts","requests/get/userId/userId.ts","components/searchPage/SearchPage.tsx","requests/get/userFollows/userFollows.ts","components/profilePage/components/followedList/followedListEntry/FollowedListEntry.tsx","requests/get/userPictures/userPictures.ts","components/profilePage/components/followedList/FollowedList.tsx","components/profilePage/ProfilePage.tsx","components/App.tsx","index.tsx"],"names":["userLoginContext","createContext","SearchBar","useContext","setUserLogin","onChange","e","target","value","type","className","placeholder","headers","Headers","process","Authorization","userId","userLogin","a","fetch","request","json","res","console","log","SearchPage","USER_LOGIN","useParams","useState","toProfilePage","setToProfilePage","searchMessage","setSearchMessage","getUserId","data","id","useEffect","onSubmit","event","preventDefault","to","icon","userFollows","FollowedListEntry","from_id","from_login","from_name","to_id","to_name","followed_at","view_count","profile_image_url","login","offline_image_url","readableDate","setReadableDate","year","slice","month","day","getReadableDate","toString","href","rel","src","alt","userPictures","FollowedList","follows","followsWithPictures","setFollowsWithPictures","getFollowsLogins","map","follow","to_login","join","getUsersPictures","followsLogins","mergeByLogin","usersPictures","user","find","usr","followLogins","getFollowsWithPictures","followWithPicture","ProfilePage","userObject","setUserObject","toSearchPage","setToSearchPage","getUserData","userData","fetchUserObject","App","Provider","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAOaA,EAAmBC,wBAAoC,CAAC,GAAI,e,OCJ5DC,EAAY,WACvB,MAAyBC,qBAAWH,GAA3BI,EAAT,oBAEA,OACE,uBACEC,SAAU,SAACC,GAAD,OAAOF,EAAaE,EAAEC,OAAOC,QACvCC,KAAK,OACLC,UAAU,YACVC,YAAY,Y,eCTLC,EAAU,IAAIC,QAAQ,CACjC,YAHeC,iCAIfC,cAAc,UAAD,OAHGD,oCCILE,EAAM,uCAAG,WACpBC,GADoB,iBAAAC,EAAA,+EAIIC,MALhB,2CAK4BF,EAAW,CAAEL,QAASA,IAJtC,cAIZQ,EAJY,gBAKAA,EAAQC,OALR,cAKZC,EALY,OAMlBC,QAAQC,IAAIF,GANM,kBAOXA,GAPW,kCASlBC,QAAQC,IAAR,MATkB,0DAAH,sDCKNC,EAAa,WACxB,IAAQC,EAAeC,cAAfD,WACR,EAAoBvB,qBAAWH,GAAxBiB,EAAP,oBACA,EAA0CW,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACMC,EAAS,uCAAG,WAAOhB,GAAP,iBAAAC,EAAA,sEACEF,EAAOC,GADT,cACVK,EADU,gCAETA,QAFS,IAETA,GAFS,UAETA,EAAKY,KAAK,UAFD,aAET,EAAcC,IAFL,2CAAH,sDAKfC,qBAAU,WAEJV,GACFM,EAAiB,GAAD,OAAIN,EAAJ,qBAGjB,IACH,IAAMW,EAAQ,uCAAG,WAAOC,GAAP,SAAApB,EAAA,6DACfoB,EAAMC,iBACNP,EAAiB,iBAAD,OAAkBf,IAFnB,SAGMgB,EAAUhB,GAHhB,cAQba,GAAiB,GAFjBE,EAAiB,GAAD,OAAIf,EAAJ,mBANH,2CAAH,sDAWd,OAAIY,EACK,cAAC,IAAD,CAAUW,GAAE,UAAK1B,oBAAL,YAA+BG,KAGlD,qBAAKP,UAAU,aAAf,SACE,uBAAM2B,SAAUA,EAAU3B,UAAU,cAApC,UACE,cAAC,IAAD,CAAM+B,KAAK,eAAe/B,UAAU,sBACpC,qBAAKA,UAAU,oBAAf,sCACA,cAAC,EAAD,IACCqB,QC1CIW,EAAW,uCAAG,WACzB1B,GADyB,eAAAE,EAAA,6DAGzBK,QAAQC,IAAIV,kCAHa,kBAKDK,MANhB,+DAM4BH,EAAQ,CAAEJ,QAASA,IAL9B,cAKjBQ,EALiB,gBAMVA,EAAQC,OANE,0EAQvBE,QAAQC,IAAR,MARuB,0DAAH,sD,OCgBXmB,EAAqC,SAAC,GAW7C,EAVJC,QAUI,EATJC,WASI,EARJC,UAQI,EAPJC,MAOK,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,YACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,kBAEAC,GACI,EAFJC,kBAEI,EADJD,OAEA,EAAwCxB,mBAAS,IAAjD,mBAAO0B,EAAP,KAAqBC,EAArB,KAUA,OAHAnB,qBAAU,WACRmB,EAPsB,SAACN,GACvB,IAAMO,EAAOP,EAAYQ,MAAM,EAAG,GAC5BC,EAAQT,EAAYQ,MAAM,EAAG,GAC7BE,EAAMV,EAAYQ,MAAM,EAAG,IACjC,MAAM,GAAN,OAAUE,EAAV,YAAiBD,EAAjB,YAA0BF,GAGVI,CAAgBX,EAAYY,eAC3C,CAACZ,IAEF,sBAAKvC,UAAU,QAAf,UACE,mBACEoD,KAAI,gCAA2BV,GAC/B7C,OAAO,SACPwD,IAAI,aAHN,SAKE,qBAAKC,IAAKb,EAAmBc,IAAI,UAAUvD,UAAU,iBAEvD,sBAAKA,UAAU,cAAf,UACE,mBACEoD,KAAI,gCAA2BV,GAC/B7C,OAAO,SACPwD,IAAI,aACJrD,UAAU,qBAJZ,SAMGsC,IAEH,8BAAIE,EAAJ,YACA,4CACA,4BAAII,WC1DCY,EAAY,uCAAG,WAC1BjD,GAD0B,iBAAAC,EAAA,+EAIFC,MALhB,qCAK4BF,EAAW,CAAEL,QAASA,IAJhC,cAIlBQ,EAJkB,gBAKNA,EAAQC,OALF,cAKlBC,EALkB,yBAMjBA,GANiB,kCAQxBC,QAAQC,IAAR,MARwB,0DAAH,sDCMZ2C,EAAgC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC9C,EAAsDxC,qBAAtD,mBAAOyC,EAAP,KAA4BC,EAA5B,KACMC,EAAmB,SAACH,GACxB,OAAOA,EACJI,KAAI,SAACC,GAAD,uBAAsBA,EAAOC,aACjCC,KAAK,IACLlB,MAAM,IAELmB,EAAgB,uCAAG,WAAOC,GAAP,eAAA3D,EAAA,sEACLgD,EAAaW,GADR,cACjBvD,EADiB,OAEvBC,QAAQC,IAAIF,GAFW,kBAGhBA,GAHgB,2CAAH,sDAKhBwD,EAAe,SACnBV,EACAW,GAQA,OANeX,EAAQI,KAAI,SAACQ,GAAD,mBAAC,eACvBD,EAAcE,MAAK,SAACC,GACrB,OAAOA,EAAI9B,QAAU4B,EAAKN,UAAYQ,MAErCF,OAcP,OAVA5C,qBAAU,YACoB,uCAAG,8BAAAlB,EAAA,6DACvBiE,EAAeZ,EAAiBH,GADT,SAEDQ,EAAiBO,GAFhB,QAEvBJ,EAFuB,SAI3BT,EAAuBQ,EAAaV,EAASW,EAAc7C,OAJhC,2CAAH,qDAO5BkD,KACC,CAAChB,IAEF,qBAAK1D,UAAU,eAAf,SACG2D,GACCA,EAAoBG,KAAI,SAACa,GAAD,OACtB,cAAC,EAAD,eAAuBA,UCrCpBC,EAAc,WACzB,MAAoBnF,qBAAWH,GAAxBiB,EAAP,oBACA,EAA0CW,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACQN,EAAeC,cAAfD,WACR,EAAoCE,qBAApC,mBAAO2D,EAAP,KAAmBC,EAAnB,KACA,EAAwC5D,oBAAS,GAAjD,mBAAO6D,EAAP,KAAqBC,EAArB,KACMzD,EAAS,uCAAG,WAAOhB,GAAP,iBAAAC,EAAA,sEACEF,EAAOC,GADT,cACVK,EADU,gCAETA,QAFS,IAETA,GAFS,UAETA,EAAKY,KAAK,UAFD,aAET,EAAcC,IAFL,2CAAH,sDAITwD,EAAW,uCAAG,WAAO3E,GAAP,eAAAE,EAAA,sEACKwB,EAAY1B,GADjB,cACZ4E,EADY,yBAEXA,GAFW,2CAAH,sDAMXvD,EAAQ,uCAAG,WAAOC,GAAP,eAAApB,EAAA,6DACfoB,EAAMC,iBACNP,EAAiB,iBAAD,OAAkBf,IAFnB,SAGMgB,EAAUhB,GAHhB,UAGTD,EAHS,uBAMbgB,EAAiB,GAAD,OAAIf,EAAJ,mBANH,mCAQbuE,EARa,UAQOG,EAAY3E,GARnB,mCASbgB,EAAiB,GAAD,OAAIf,EAAJ,aATH,4CAAH,sDA6Bd,OAfAmB,qBAAU,YACa,uCAAG,4BAAAlB,EAAA,sEACDe,EAAUP,GADT,UAChBV,EADgB,uBAKpB0E,GAAgB,GALI,mCAOpBF,EAPoB,UAOAG,EAAY3E,GAPZ,+EAAH,qDAUrB6E,KAEC,IAECJ,EACK,cAAC,IAAD,CAAUjD,GAAE,UAAK1B,oBAAL,kBAAqCG,KAGxD,qBAAKP,UAAU,cAAf,SACG6E,GAAcA,EAAWrD,MACxB,qCACE,sBAAMG,SAAUA,EAAU3B,UAAU,cAApC,SACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,yBAAb,qCACA,cAAC,EAAD,IACA,mBAAGA,UAAU,kCAAb,SAAgDqB,SAGpD,cAAC,EAAD,CAAcqC,QAASmB,EAAWrD,a,OClE/B4D,EAAM,WACjB,MAAkClE,mBAAS,IAA3C,mBAAOX,EAAP,KAAkBb,EAAlB,KACA,OACE,cAAC,IAAD,UACE,qBAAKM,UAAU,aAAf,SACE,cAAC,IAAD,UACE,eAACV,EAAiB+F,SAAlB,CAA2BvF,MAAO,CAACS,EAAWb,GAA9C,UACE,cAAC,IAAD,CACE4F,KAAM,CAAC,GAAD,OACDlF,oBADC,eAEDA,oBAFC,uBAINmF,OAAK,EALP,SAOE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAI,UAAKlF,oBAAL,gBAA2CmF,OAAK,EAA3D,SACE,cAAC,EAAD,gBClBdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c719f689.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\ntype overviewContextProps = [\n  userLogin: string,\n  setOverviewBox: React.Dispatch<React.SetStateAction<any>>\n];\n\nexport const userLoginContext = createContext<overviewContextProps>([\"\", () => { }]);","import { useContext } from 'react';\nimport { userLoginContext } from '../../../../utils/userLoginContext';\n\nexport const SearchBar = () => {\n  const [, setUserLogin] = useContext(userLoginContext);\n\n  return (\n    <input\n      onChange={(e) => setUserLogin(e.target.value)}\n      type='text'\n      className='SearchBar'\n      placeholder='Search'\n    ></input>\n  );\n};\n","const clientId = process.env.REACT_APP_CLIENT_ID;\nconst oauthCode = process.env.REACT_APP_OAUTH_CODE;\nexport const headers = new Headers({\n  'Client-ID': clientId!,\n  Authorization: `Bearer ${oauthCode}`,\n});","//https://dev.twitch.tv/docs/api/reference#get-users\nimport { userIdType } from './userId.type';\nimport { headers } from '../../headers';\n\nlet url = 'https://api.twitch.tv/helix/users?login=';\nexport const userId = async (\n  userLogin: string\n): Promise<userIdType | undefined> => {\n  try {\n    const request = await fetch(url + userLogin, { headers: headers });\n    const res = await request.json();\n    console.log(res);\n    return res;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import { useState, useEffect, useContext } from 'react';\nimport { SearchBar } from './components/searchBar/SearchBar';\nimport { Icon } from '@iconify/react';\nimport { userLoginContext } from '../../utils/userLoginContext';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { userId } from '../../requests/get/userId/userId';\n\ninterface ParamTypes {\n  USER_LOGIN?: string;\n}\nexport const SearchPage = () => {\n  const { USER_LOGIN } = useParams<ParamTypes>();\n  const [userLogin] = useContext(userLoginContext);\n  const [toProfilePage, setToProfilePage] = useState(false);\n  const [searchMessage, setSearchMessage] = useState('');\n  const getUserId = async (userLogin: string) => {\n    const res = await userId(userLogin);\n    return res?.data[0]?.id;\n  };\n\n  useEffect(() => {\n    // if USER_LOGIN exist, then we are on /error/nick website and there was error finding the user\n    if (USER_LOGIN) {\n      setSearchMessage(`${USER_LOGIN} was not found`);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setSearchMessage(`searching for ${userLogin}`);\n    const userId = await getUserId(userLogin);\n    //if userId was not found the message that user was not found pops out, if found redirect to profile page\n    if (!userId) {\n      setSearchMessage(`${userLogin} was not found`);\n    } else {\n      setToProfilePage(true);\n    }\n  };\n  if (toProfilePage) {\n    return <Redirect to={`${process.env.PUBLIC_URL}/${userLogin}`} />;\n  }\n  return (\n    <div className='SearchPage'>\n      <form onSubmit={onSubmit} className='searchField'>\n        <Icon icon='logos:twitch' className='searchField__icon' />\n        <div className='searchField__text'>Search for a twitch user</div>\n        <SearchBar />\n        {searchMessage}\n      </form>\n    </div>\n  );\n};\n","//https://dev.twitch.tv/docs/api/reference/#get-users-follows\nimport { userFollowsType } from './userFollows.type';\nimport { headers } from '../../headers';\n\nlet url = 'https://api.twitch.tv/helix/users/follows?first=100&from_id=';\nexport const userFollows = async (\n  userId: string\n): Promise<userFollowsType | undefined> => {\n  console.log(process.env.REACT_APP_OAUTH_CODE);\n  try {\n    const request = await fetch(url + userId, { headers: headers });\n    return await request.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import { useState, useEffect } from 'react';\ninterface Props {\n  from_id: string;\n  from_login: string;\n  from_name: string;\n  to_id: string;\n  to_login: string;\n  to_name: string;\n  followed_at: Date;\n  id: string;\n  login: string;\n  display_name: string;\n  type: string;\n  broadcaster_type: string;\n  description: string;\n  profile_image_url: string;\n  offline_image_url: string;\n  view_count: number;\n  created_at: Date;\n}\n\nexport const FollowedListEntry: React.FC<Props> = ({\n  from_id,\n  from_login,\n  from_name,\n  to_id,\n  to_name,\n  followed_at,\n  view_count,\n  profile_image_url,\n  offline_image_url,\n  login,\n}) => {\n  const [readableDate, setReadableDate] = useState('');\n  const getReadableDate = (followed_at: string) => {\n    const year = followed_at.slice(0, 4);\n    const month = followed_at.slice(5, 7);\n    const day = followed_at.slice(8, 10);\n    return `${day}.${month}.${year}`;\n  };\n  useEffect(() => {\n    setReadableDate(getReadableDate(followed_at.toString()));\n  }, [followed_at]);\n  return (\n    <div className='entry'>\n      <a\n        href={`https://www.twitch.tv/${login}`}\n        target='_blank'\n        rel='noreferrer'\n      >\n        <img src={profile_image_url} alt='Profile' className='entry__img' />\n      </a>\n      <div className='entry__info'>\n        <a\n          href={`https://www.twitch.tv/${login}`}\n          target='_blank'\n          rel='noreferrer'\n          className='entry__info__login'\n        >\n          {to_name}\n        </a>\n        <p>{view_count} views</p>\n        <p>followed at</p>\n        <p>{readableDate}</p>\n      </div>\n    </div>\n  );\n};\n","//https://dev.twitch.tv/docs/api/reference#get-users\nimport { userPicturesType } from './userPictures.type';\nimport { headers } from '../../headers';\n\nlet url = 'https://api.twitch.tv/helix/users?';\nexport const userPictures = async (\n  userLogin: string\n): Promise<userPicturesType | undefined> => {\n  try {\n    const request = await fetch(url + userLogin, { headers: headers });\n    const res = await request.json();\n    return res;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { follow as followType } from '../../../../requests/get/userFollows/userFollows.type';\nimport { FollowedListEntry } from './followedListEntry/FollowedListEntry';\nimport { userPictures } from '../../../../requests/get/userPictures/userPictures';\nimport { userInfo as userInfoType } from '../../../../requests/get/userPictures/userPictures.type';\n\ninterface Props {\n  follows: followType[];\n}\ntype followWithPictures = followType & userInfoType;\n\nexport const FollowedList: React.FC<Props> = ({ follows }) => {\n  const [followsWithPictures, setFollowsWithPictures] = useState<any>();\n  const getFollowsLogins = (follows: followType[]) => {\n    return follows\n      .map((follow) => `&login=${follow.to_login}`)\n      .join('')\n      .slice(1);\n  };\n  const getUsersPictures = async (followsLogins: string) => {\n    const res = await userPictures(followsLogins);\n    console.log(res);\n    return res;\n  };\n  const mergeByLogin = (\n    follows: followType[],\n    usersPictures: userInfoType[]\n  ) => {\n    const merged = follows.map((user) => ({\n      ...usersPictures.find((usr) => {\n        return usr.login === user.to_login && usr;\n      }),\n      ...user,\n    }));\n    return merged;\n  };\n  useEffect(() => {\n    const getFollowsWithPictures = async () => {\n      const followLogins = getFollowsLogins(follows);\n      const usersPictures = await getUsersPictures(followLogins);\n      if (usersPictures) {\n        setFollowsWithPictures(mergeByLogin(follows, usersPictures.data));\n      }\n    };\n    getFollowsWithPictures();\n  }, [follows]);\n  return (\n    <div className='followedList'>\n      {followsWithPictures &&\n        followsWithPictures.map((followWithPicture: followWithPictures) => (\n          <FollowedListEntry {...followWithPicture} />\n        ))}\n    </div>\n  );\n};\n","import { useState, useEffect, useContext } from 'react';\nimport { userLoginContext } from '../../utils/userLoginContext';\nimport { useParams } from 'react-router-dom';\nimport { userFollows } from '../../requests/get/userFollows/userFollows';\nimport { userFollowsType } from '../../requests/get/userFollows/userFollows.type';\nimport { userId } from '../../requests/get/userId/userId';\nimport { FollowedList } from './components/followedList/FollowedList';\nimport { Redirect } from 'react-router-dom';\nimport { SearchBar } from '../searchPage/components/searchBar/SearchBar';\n\ninterface ParamTypes {\n  USER_LOGIN: string;\n}\nexport const ProfilePage = () => {\n  const [userLogin] = useContext(userLoginContext);\n  const [searchMessage, setSearchMessage] = useState('');\n  const { USER_LOGIN } = useParams<ParamTypes>();\n  const [userObject, setUserObject] = useState<userFollowsType>();\n  const [toSearchPage, setToSearchPage] = useState(false);\n  const getUserId = async (userLogin: string) => {\n    const res = await userId(userLogin);\n    return res?.data[0]?.id;\n  };\n  const getUserData = async (userId: string) => {\n    const userData = await userFollows(userId);\n    return userData;\n  };\n\n  // After every submit of the form\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setSearchMessage(`searching for ${userLogin}`);\n    const userId = await getUserId(userLogin);\n    //if userId was not found the message that user was not found pops out, if found redirect to profile page\n    if (!userId) {\n      setSearchMessage(`${userLogin} was not found`);\n    } else {\n      setUserObject(await getUserData(userId));\n      setSearchMessage(`${userLogin} follows`);\n    }\n  };\n\n  // Only on first redirect\n  useEffect(() => {\n    const fetchUserObject = async () => {\n      const userId = await getUserId(USER_LOGIN);\n      //if userId was not found that means user used link /twitch-followers/nick in browser instead of form\n      //and the twitch user doesn't exist so we redirect him to search page\n      if (!userId) {\n        setToSearchPage(true);\n      } else {\n        setUserObject(await getUserData(userId));\n      }\n    };\n    fetchUserObject();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (toSearchPage) {\n    return <Redirect to={`${process.env.PUBLIC_URL}/error/${userLogin}`} />;\n  }\n  return (\n    <div className='profilePage'>\n      {userObject && userObject.data && (\n        <>\n          <form onSubmit={onSubmit} className='searchField'>\n            <div className='searchBarWrapper'>\n              <p className='searchBarWrapper__text'>Search for another user</p>\n              <SearchBar />\n              <p className='searchBarWrapper__searchMessage'>{searchMessage}</p>\n            </div>\n          </form>\n          <FollowedList follows={userObject.data} />\n        </>\n      )}\n    </div>\n  );\n};\n","import { SearchPage } from './searchPage/SearchPage';\nimport { ProfilePage } from './profilePage/ProfilePage';\nimport { userLoginContext } from '../utils/userLoginContext';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nexport const App = () => {\n  const [userLogin, setUserLogin] = useState('');\n  return (\n    <Router>\n      <div className='appWrapper'>\n        <Switch>\n          <userLoginContext.Provider value={[userLogin, setUserLogin]}>\n            <Route\n              path={[\n                `${process.env.PUBLIC_URL}/`,\n                `${process.env.PUBLIC_URL}/error/:USER_LOGIN`,\n              ]}\n              exact\n            >\n              <SearchPage />\n            </Route>\n            <Route path={`${process.env.PUBLIC_URL}/:USER_LOGIN`} exact>\n              <ProfilePage />\n            </Route>\n          </userLoginContext.Provider>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}