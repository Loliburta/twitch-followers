{"version":3,"sources":["utils/userLoginContext.ts","components/searchPage/components/searchBar/SearchBar.tsx","requests/headers.ts","requests/get/userFollows.ts","requests/get/userId.ts","components/searchPage/SearchPage.tsx","components/App.tsx","index.tsx"],"names":["userLoginContext","createContext","SearchBar","useContext","setUserLogin","onChange","e","target","value","type","className","placeholder","headers","Headers","process","Authorization","userFollows","userId","a","console","log","fetch","request","json","userLogin","SearchPage","getFollowers","followers","getUserId","res","data","id","onSubmit","event","preventDefault","icon","App","useState","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAOaA,EAAmBC,wBAAoC,CAAC,GAAI,e,OCJ5DC,EAAY,WACvB,MAAyBC,qBAAWH,GAA3BI,EAAT,oBAEA,OACE,uBACEC,SAAU,SAACC,GAAD,OAAOF,EAAaE,EAAEC,OAAOC,QACvCC,KAAK,OACLC,UAAU,YACVC,YAAY,e,OCTLC,EAAU,IAAIC,QAAQ,CACjC,YAHeC,iCAIfC,cAAc,UAAD,OAHGD,oCCGLE,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACzBC,QAAQC,IAAIN,kCADa,kBAGDO,MAJhB,+DAI4BJ,EAAQ,CAAEL,QAASA,IAH9B,cAGjBU,EAHiB,gBAIVA,EAAQC,OAJE,0EAMvBJ,QAAQC,IAAR,MANuB,0DAAH,sDCAXH,EAAM,uCAAG,WAAOO,GAAP,eAAAN,EAAA,+EAEIG,MAHhB,2CAG4BG,EAAW,CAAEZ,QAASA,IAFtC,cAEZU,EAFY,gBAGLA,EAAQC,OAHH,wEAKlBJ,QAAQC,IAAR,MALkB,yDAAH,sDCGNK,EAAa,WACxB,MAAoBtB,qBAAWH,GAAxBwB,EAAP,oBACME,EAAY,uCAAG,WAAOT,GAAP,eAAAC,EAAA,sEACKF,EAAYC,GADjB,OACbU,EADa,OAEnBR,QAAQC,IAAIO,GAFO,2CAAH,sDAIZC,EAAS,uCAAG,WAAOJ,GAAP,eAAAN,EAAA,sEACED,EAAOO,GADT,OACVK,EADU,OAEhBV,QAAQC,IAAIS,EAAIC,KAAK,GAAGC,IACxBL,EAAaG,EAAIC,KAAK,GAAGC,IAHT,2CAAH,sDAUf,OACE,qBAAKrB,UAAU,aAAf,SACE,uBAAMsB,SAPO,SAACC,GAChBA,EAAMC,iBACNf,QAAQC,MACRQ,EAAUJ,IAIR,UACE,cAAC,IAAD,CAAMW,KAAK,iBACX,0DACA,cAAC,EAAD,UCxBKC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOb,EAAP,KAAkBpB,EAAlB,KACA,OACE,8BACE,cAACJ,EAAiBsC,SAAlB,CAA2B9B,MAAO,CAACgB,EAAWpB,GAA9C,SACE,cAAC,EAAD,SCJRmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f09087dc.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\ntype overviewContextProps = [\n  userLogin: string,\n  setOverviewBox: React.Dispatch<React.SetStateAction<any>>\n];\n\nexport const userLoginContext = createContext<overviewContextProps>([\"\", () => { }]);","import { useContext } from 'react';\nimport { userLoginContext } from '../../../../utils/userLoginContext';\n\nexport const SearchBar = () => {\n  const [, setUserLogin] = useContext(userLoginContext);\n\n  return (\n    <input\n      onChange={(e) => setUserLogin(e.target.value)}\n      type='text'\n      className='SearchBar'\n      placeholder='Search...'\n    ></input>\n  );\n};\n","const clientId = process.env.REACT_APP_CLIENT_ID;\nconst oauthCode = process.env.REACT_APP_OAUTH_CODE;\nexport const headers = new Headers({\n  'Client-ID': clientId!,\n  Authorization: `Bearer ${oauthCode}`,\n});","//https://dev.twitch.tv/docs/api/reference/#get-users-follows\nimport { headers } from '../headers';\n\nlet url = 'https://api.twitch.tv/helix/users/follows?first=100&from_id=';\nexport const userFollows = async (userId: string) => {\n  console.log(process.env.REACT_APP_OAUTH_CODE);\n  try {\n    const request = await fetch(url + userId, { headers: headers });\n    return await request.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n","//https://discuss.dev.twitch.tv/t/getting-user-ids/13806\nimport { headers } from '../headers';\n\nlet url = 'https://api.twitch.tv/helix/users?login=';\nexport const userId = async (userLogin: string) => {\n  try {\n    const request = await fetch(url + userLogin, { headers: headers });\n    return await request.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import { useContext } from 'react';\nimport { SearchBar } from './components/searchBar/SearchBar';\nimport { Icon } from '@iconify/react';\nimport { userFollows } from '../../requests/get/userFollows';\nimport { userId } from '../../requests/get/userId';\nimport { userLoginContext } from '../../utils/userLoginContext';\n\nexport const SearchPage = () => {\n  const [userLogin] = useContext(userLoginContext);\n  const getFollowers = async (userId: string) => {\n    const followers = await userFollows(userId);\n    console.log(followers);\n  };\n  const getUserId = async (userLogin: string) => {\n    const res = await userId(userLogin);\n    console.log(res.data[0].id);\n    getFollowers(res.data[0].id);\n  };\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    console.log();\n    getUserId(userLogin);\n  };\n  return (\n    <div className='SearchPage'>\n      <form onSubmit={onSubmit}>\n        <Icon icon='logos:twitch' />\n        <span>Search for twitch user</span>\n        <SearchBar />\n      </form>\n    </div>\n  );\n};\n","import { SearchPage } from './searchPage/SearchPage';\nimport { userLoginContext } from '../utils/userLoginContext';\nimport { useState } from 'react';\n\nexport const App = () => {\n  const [userLogin, setUserLogin] = useState('');\n  return (\n    <div>\n      <userLoginContext.Provider value={[userLogin, setUserLogin]}>\n        <SearchPage />\n      </userLoginContext.Provider>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}